// Code generated by fastssz. DO NOT EDIT.
// Hash: 6ad4c6cac75b64d1c3fc68f9a815ecbd0dc4f2f2fad9178185eb8c9c7429f922
// Version: 0.1.3
package types

import (
	ssz "github.com/ferranbt/fastssz"
)

// MarshalSSZ ssz marshals the encodingPerTxAccess object
func (e *encodingPerTxAccess) MarshalSSZ() ([]byte, error) {
	return ssz.MarshalSSZ(e)
}

// MarshalSSZTo ssz marshals the encodingPerTxAccess object to a target array
func (e *encodingPerTxAccess) MarshalSSZTo(buf []byte) (dst []byte, err error) {
	dst = buf

	// Field (0) 'TxIdx'
	dst = ssz.MarshalUint64(dst, e.TxIdx)

	// Field (1) 'ValueAfter'
	dst = append(dst, e.ValueAfter[:]...)

	return
}

// UnmarshalSSZ ssz unmarshals the encodingPerTxAccess object
func (e *encodingPerTxAccess) UnmarshalSSZ(buf []byte) error {
	var err error
	size := uint64(len(buf))
	if size != 40 {
		return ssz.ErrSize
	}

	// Field (0) 'TxIdx'
	e.TxIdx = ssz.UnmarshallUint64(buf[0:8])

	// Field (1) 'ValueAfter'
	copy(e.ValueAfter[:], buf[8:40])

	return err
}

// SizeSSZ returns the ssz encoded size in bytes for the encodingPerTxAccess object
func (e *encodingPerTxAccess) SizeSSZ() (size int) {
	size = 40
	return
}

// HashTreeRoot ssz hashes the encodingPerTxAccess object
func (e *encodingPerTxAccess) HashTreeRoot() ([32]byte, error) {
	return ssz.HashWithDefaultHasher(e)
}

// HashTreeRootWith ssz hashes the encodingPerTxAccess object with a hasher
func (e *encodingPerTxAccess) HashTreeRootWith(hh ssz.HashWalker) (err error) {
	indx := hh.Index()

	// Field (0) 'TxIdx'
	hh.PutUint64(e.TxIdx)

	// Field (1) 'ValueAfter'
	hh.PutBytes(e.ValueAfter[:])

	hh.Merkleize(indx)
	return
}

// GetTree ssz hashes the encodingPerTxAccess object
func (e *encodingPerTxAccess) GetTree() (*ssz.Node, error) {
	return ssz.ProofTree(e)
}

// MarshalSSZ ssz marshals the encodingSlotAccess object
func (e *encodingSlotAccess) MarshalSSZ() ([]byte, error) {
	return ssz.MarshalSSZ(e)
}

// MarshalSSZTo ssz marshals the encodingSlotAccess object to a target array
func (e *encodingSlotAccess) MarshalSSZTo(buf []byte) (dst []byte, err error) {
	dst = buf
	offset := int(36)

	// Field (0) 'Slot'
	dst = append(dst, e.Slot[:]...)

	// Offset (1) 'Accesses'
	dst = ssz.WriteOffset(dst, offset)

	// Field (1) 'Accesses'
	if size := len(e.Accesses); size > 30000 {
		err = ssz.ErrListTooBigFn("encodingSlotAccess.Accesses", size, 30000)
		return
	}
	for ii := 0; ii < len(e.Accesses); ii++ {
		if dst, err = e.Accesses[ii].MarshalSSZTo(dst); err != nil {
			return
		}
	}

	return
}

// UnmarshalSSZ ssz unmarshals the encodingSlotAccess object
func (e *encodingSlotAccess) UnmarshalSSZ(buf []byte) error {
	var err error
	size := uint64(len(buf))
	if size < 36 {
		return ssz.ErrSize
	}

	tail := buf
	var o1 uint64

	// Field (0) 'Slot'
	copy(e.Slot[:], buf[0:32])

	// Offset (1) 'Accesses'
	if o1 = ssz.ReadOffset(buf[32:36]); o1 > size {
		return ssz.ErrOffset
	}

	if o1 != 36 {
		return ssz.ErrInvalidVariableOffset
	}

	// Field (1) 'Accesses'
	{
		buf = tail[o1:]
		num, err := ssz.DivideInt2(len(buf), 40, 30000)
		if err != nil {
			return err
		}
		e.Accesses = make([]encodingPerTxAccess, num)
		for ii := 0; ii < num; ii++ {
			if err = e.Accesses[ii].UnmarshalSSZ(buf[ii*40 : (ii+1)*40]); err != nil {
				return err
			}
		}
	}
	return err
}

// SizeSSZ returns the ssz encoded size in bytes for the encodingSlotAccess object
func (e *encodingSlotAccess) SizeSSZ() (size int) {
	size = 36

	// Field (1) 'Accesses'
	size += len(e.Accesses) * 40

	return
}

// HashTreeRoot ssz hashes the encodingSlotAccess object
func (e *encodingSlotAccess) HashTreeRoot() ([32]byte, error) {
	return ssz.HashWithDefaultHasher(e)
}

// HashTreeRootWith ssz hashes the encodingSlotAccess object with a hasher
func (e *encodingSlotAccess) HashTreeRootWith(hh ssz.HashWalker) (err error) {
	indx := hh.Index()

	// Field (0) 'Slot'
	hh.PutBytes(e.Slot[:])

	// Field (1) 'Accesses'
	{
		subIndx := hh.Index()
		num := uint64(len(e.Accesses))
		if num > 30000 {
			err = ssz.ErrIncorrectListSize
			return
		}
		for _, elem := range e.Accesses {
			if err = elem.HashTreeRootWith(hh); err != nil {
				return
			}
		}
		hh.MerkleizeWithMixin(subIndx, num, 30000)
	}

	hh.Merkleize(indx)
	return
}

// GetTree ssz hashes the encodingSlotAccess object
func (e *encodingSlotAccess) GetTree() (*ssz.Node, error) {
	return ssz.ProofTree(e)
}

// MarshalSSZ ssz marshals the encodingAccountAccess object
func (e *encodingAccountAccess) MarshalSSZ() ([]byte, error) {
	return ssz.MarshalSSZ(e)
}

// MarshalSSZTo ssz marshals the encodingAccountAccess object to a target array
func (e *encodingAccountAccess) MarshalSSZTo(buf []byte) (dst []byte, err error) {
	dst = buf
	offset := int(40)

	// Field (0) 'Address'
	dst = append(dst, e.Address[:]...)

	// Offset (1) 'Accesses'
	dst = ssz.WriteOffset(dst, offset)
	for ii := 0; ii < len(e.Accesses); ii++ {
		offset += 4
		offset += e.Accesses[ii].SizeSSZ()
	}

	// Offset (2) 'Code'
	dst = ssz.WriteOffset(dst, offset)

	// Field (1) 'Accesses'
	if size := len(e.Accesses); size > 300000 {
		err = ssz.ErrListTooBigFn("encodingAccountAccess.Accesses", size, 300000)
		return
	}
	{
		offset = 4 * len(e.Accesses)
		for ii := 0; ii < len(e.Accesses); ii++ {
			dst = ssz.WriteOffset(dst, offset)
			offset += e.Accesses[ii].SizeSSZ()
		}
	}
	for ii := 0; ii < len(e.Accesses); ii++ {
		if dst, err = e.Accesses[ii].MarshalSSZTo(dst); err != nil {
			return
		}
	}

	// Field (2) 'Code'
	if size := len(e.Code); size > 24576 {
		err = ssz.ErrBytesLengthFn("encodingAccountAccess.Code", size, 24576)
		return
	}
	dst = append(dst, e.Code...)

	return
}

// UnmarshalSSZ ssz unmarshals the encodingAccountAccess object
func (e *encodingAccountAccess) UnmarshalSSZ(buf []byte) error {
	var err error
	size := uint64(len(buf))
	if size < 40 {
		return ssz.ErrSize
	}

	tail := buf
	var o1, o2 uint64

	// Field (0) 'Address'
	copy(e.Address[:], buf[0:32])

	// Offset (1) 'Accesses'
	if o1 = ssz.ReadOffset(buf[32:36]); o1 > size {
		return ssz.ErrOffset
	}

	if o1 != 40 {
		return ssz.ErrInvalidVariableOffset
	}

	// Offset (2) 'Code'
	if o2 = ssz.ReadOffset(buf[36:40]); o2 > size || o1 > o2 {
		return ssz.ErrOffset
	}

	// Field (1) 'Accesses'
	{
		buf = tail[o1:o2]
		num, err := ssz.DecodeDynamicLength(buf, 300000)
		if err != nil {
			return err
		}
		e.Accesses = make([]encodingSlotAccess, num)
		err = ssz.UnmarshalDynamic(buf, num, func(indx int, buf []byte) (err error) {
			if err = e.Accesses[indx].UnmarshalSSZ(buf); err != nil {
				return err
			}
			return nil
		})
		if err != nil {
			return err
		}
	}

	// Field (2) 'Code'
	{
		buf = tail[o2:]
		if len(buf) > 24576 {
			return ssz.ErrBytesLength
		}
		if cap(e.Code) == 0 {
			e.Code = make([]byte, 0, len(buf))
		}
		e.Code = append(e.Code, buf...)
	}
	return err
}

// SizeSSZ returns the ssz encoded size in bytes for the encodingAccountAccess object
func (e *encodingAccountAccess) SizeSSZ() (size int) {
	size = 40

	// Field (1) 'Accesses'
	for ii := 0; ii < len(e.Accesses); ii++ {
		size += 4
		size += e.Accesses[ii].SizeSSZ()
	}

	// Field (2) 'Code'
	size += len(e.Code)

	return
}

// HashTreeRoot ssz hashes the encodingAccountAccess object
func (e *encodingAccountAccess) HashTreeRoot() ([32]byte, error) {
	return ssz.HashWithDefaultHasher(e)
}

// HashTreeRootWith ssz hashes the encodingAccountAccess object with a hasher
func (e *encodingAccountAccess) HashTreeRootWith(hh ssz.HashWalker) (err error) {
	indx := hh.Index()

	// Field (0) 'Address'
	hh.PutBytes(e.Address[:])

	// Field (1) 'Accesses'
	{
		subIndx := hh.Index()
		num := uint64(len(e.Accesses))
		if num > 300000 {
			err = ssz.ErrIncorrectListSize
			return
		}
		for _, elem := range e.Accesses {
			if err = elem.HashTreeRootWith(hh); err != nil {
				return
			}
		}
		hh.MerkleizeWithMixin(subIndx, num, 300000)
	}

	// Field (2) 'Code'
	{
		elemIndx := hh.Index()
		byteLen := uint64(len(e.Code))
		if byteLen > 24576 {
			err = ssz.ErrIncorrectListSize
			return
		}
		hh.Append(e.Code)
		hh.MerkleizeWithMixin(elemIndx, byteLen, (24576+31)/32)
	}

	hh.Merkleize(indx)
	return
}

// GetTree ssz hashes the encodingAccountAccess object
func (e *encodingAccountAccess) GetTree() (*ssz.Node, error) {
	return ssz.ProofTree(e)
}

// MarshalSSZ ssz marshals the encodingBalanceChange object
func (e *encodingBalanceChange) MarshalSSZ() ([]byte, error) {
	return ssz.MarshalSSZ(e)
}

// MarshalSSZTo ssz marshals the encodingBalanceChange object to a target array
func (e *encodingBalanceChange) MarshalSSZTo(buf []byte) (dst []byte, err error) {
	dst = buf

	// Field (0) 'TxIdx'
	dst = ssz.MarshalUint64(dst, e.TxIdx)

	// Field (1) 'Delta'
	dst = append(dst, e.Delta[:]...)

	return
}

// UnmarshalSSZ ssz unmarshals the encodingBalanceChange object
func (e *encodingBalanceChange) UnmarshalSSZ(buf []byte) error {
	var err error
	size := uint64(len(buf))
	if size != 20 {
		return ssz.ErrSize
	}

	// Field (0) 'TxIdx'
	e.TxIdx = ssz.UnmarshallUint64(buf[0:8])

	// Field (1) 'Delta'
	copy(e.Delta[:], buf[8:20])

	return err
}

// SizeSSZ returns the ssz encoded size in bytes for the encodingBalanceChange object
func (e *encodingBalanceChange) SizeSSZ() (size int) {
	size = 20
	return
}

// HashTreeRoot ssz hashes the encodingBalanceChange object
func (e *encodingBalanceChange) HashTreeRoot() ([32]byte, error) {
	return ssz.HashWithDefaultHasher(e)
}

// HashTreeRootWith ssz hashes the encodingBalanceChange object with a hasher
func (e *encodingBalanceChange) HashTreeRootWith(hh ssz.HashWalker) (err error) {
	indx := hh.Index()

	// Field (0) 'TxIdx'
	hh.PutUint64(e.TxIdx)

	// Field (1) 'Delta'
	hh.PutBytes(e.Delta[:])

	hh.Merkleize(indx)
	return
}

// GetTree ssz hashes the encodingBalanceChange object
func (e *encodingBalanceChange) GetTree() (*ssz.Node, error) {
	return ssz.ProofTree(e)
}

// MarshalSSZ ssz marshals the encodingAccountBalanceDiff object
func (e *encodingAccountBalanceDiff) MarshalSSZ() ([]byte, error) {
	return ssz.MarshalSSZ(e)
}

// MarshalSSZTo ssz marshals the encodingAccountBalanceDiff object to a target array
func (e *encodingAccountBalanceDiff) MarshalSSZTo(buf []byte) (dst []byte, err error) {
	dst = buf
	offset := int(24)

	// Field (0) 'Address'
	dst = append(dst, e.Address[:]...)

	// Offset (1) 'Changes'
	dst = ssz.WriteOffset(dst, offset)

	// Field (1) 'Changes'
	if size := len(e.Changes); size > 30000 {
		err = ssz.ErrListTooBigFn("encodingAccountBalanceDiff.Changes", size, 30000)
		return
	}
	for ii := 0; ii < len(e.Changes); ii++ {
		if dst, err = e.Changes[ii].MarshalSSZTo(dst); err != nil {
			return
		}
	}

	return
}

// UnmarshalSSZ ssz unmarshals the encodingAccountBalanceDiff object
func (e *encodingAccountBalanceDiff) UnmarshalSSZ(buf []byte) error {
	var err error
	size := uint64(len(buf))
	if size < 24 {
		return ssz.ErrSize
	}

	tail := buf
	var o1 uint64

	// Field (0) 'Address'
	copy(e.Address[:], buf[0:20])

	// Offset (1) 'Changes'
	if o1 = ssz.ReadOffset(buf[20:24]); o1 > size {
		return ssz.ErrOffset
	}

	if o1 != 24 {
		return ssz.ErrInvalidVariableOffset
	}

	// Field (1) 'Changes'
	{
		buf = tail[o1:]
		num, err := ssz.DivideInt2(len(buf), 20, 30000)
		if err != nil {
			return err
		}
		e.Changes = make([]encodingBalanceChange, num)
		for ii := 0; ii < num; ii++ {
			if err = e.Changes[ii].UnmarshalSSZ(buf[ii*20 : (ii+1)*20]); err != nil {
				return err
			}
		}
	}
	return err
}

// SizeSSZ returns the ssz encoded size in bytes for the encodingAccountBalanceDiff object
func (e *encodingAccountBalanceDiff) SizeSSZ() (size int) {
	size = 24

	// Field (1) 'Changes'
	size += len(e.Changes) * 20

	return
}

// HashTreeRoot ssz hashes the encodingAccountBalanceDiff object
func (e *encodingAccountBalanceDiff) HashTreeRoot() ([32]byte, error) {
	return ssz.HashWithDefaultHasher(e)
}

// HashTreeRootWith ssz hashes the encodingAccountBalanceDiff object with a hasher
func (e *encodingAccountBalanceDiff) HashTreeRootWith(hh ssz.HashWalker) (err error) {
	indx := hh.Index()

	// Field (0) 'Address'
	hh.PutBytes(e.Address[:])

	// Field (1) 'Changes'
	{
		subIndx := hh.Index()
		num := uint64(len(e.Changes))
		if num > 30000 {
			err = ssz.ErrIncorrectListSize
			return
		}
		for _, elem := range e.Changes {
			if err = elem.HashTreeRootWith(hh); err != nil {
				return
			}
		}
		hh.MerkleizeWithMixin(subIndx, num, 30000)
	}

	hh.Merkleize(indx)
	return
}

// GetTree ssz hashes the encodingAccountBalanceDiff object
func (e *encodingAccountBalanceDiff) GetTree() (*ssz.Node, error) {
	return ssz.ProofTree(e)
}

// MarshalSSZ ssz marshals the encodingCodeChange object
func (e *encodingCodeChange) MarshalSSZ() ([]byte, error) {
	return ssz.MarshalSSZ(e)
}

// MarshalSSZTo ssz marshals the encodingCodeChange object to a target array
func (e *encodingCodeChange) MarshalSSZTo(buf []byte) (dst []byte, err error) {
	dst = buf
	offset := int(12)

	// Field (0) 'TxIdx'
	dst = ssz.MarshalUint64(dst, e.TxIdx)

	// Offset (1) 'NewCode'
	dst = ssz.WriteOffset(dst, offset)

	// Field (1) 'NewCode'
	if size := len(e.NewCode); size > 24576 {
		err = ssz.ErrBytesLengthFn("encodingCodeChange.NewCode", size, 24576)
		return
	}
	dst = append(dst, e.NewCode...)

	return
}

// UnmarshalSSZ ssz unmarshals the encodingCodeChange object
func (e *encodingCodeChange) UnmarshalSSZ(buf []byte) error {
	var err error
	size := uint64(len(buf))
	if size < 12 {
		return ssz.ErrSize
	}

	tail := buf
	var o1 uint64

	// Field (0) 'TxIdx'
	e.TxIdx = ssz.UnmarshallUint64(buf[0:8])

	// Offset (1) 'NewCode'
	if o1 = ssz.ReadOffset(buf[8:12]); o1 > size {
		return ssz.ErrOffset
	}

	if o1 != 12 {
		return ssz.ErrInvalidVariableOffset
	}

	// Field (1) 'NewCode'
	{
		buf = tail[o1:]
		if len(buf) > 24576 {
			return ssz.ErrBytesLength
		}
		if cap(e.NewCode) == 0 {
			e.NewCode = make([]byte, 0, len(buf))
		}
		e.NewCode = append(e.NewCode, buf...)
	}
	return err
}

// SizeSSZ returns the ssz encoded size in bytes for the encodingCodeChange object
func (e *encodingCodeChange) SizeSSZ() (size int) {
	size = 12

	// Field (1) 'NewCode'
	size += len(e.NewCode)

	return
}

// HashTreeRoot ssz hashes the encodingCodeChange object
func (e *encodingCodeChange) HashTreeRoot() ([32]byte, error) {
	return ssz.HashWithDefaultHasher(e)
}

// HashTreeRootWith ssz hashes the encodingCodeChange object with a hasher
func (e *encodingCodeChange) HashTreeRootWith(hh ssz.HashWalker) (err error) {
	indx := hh.Index()

	// Field (0) 'TxIdx'
	hh.PutUint64(e.TxIdx)

	// Field (1) 'NewCode'
	{
		elemIndx := hh.Index()
		byteLen := uint64(len(e.NewCode))
		if byteLen > 24576 {
			err = ssz.ErrIncorrectListSize
			return
		}
		hh.Append(e.NewCode)
		hh.MerkleizeWithMixin(elemIndx, byteLen, (24576+31)/32)
	}

	hh.Merkleize(indx)
	return
}

// GetTree ssz hashes the encodingCodeChange object
func (e *encodingCodeChange) GetTree() (*ssz.Node, error) {
	return ssz.ProofTree(e)
}

// MarshalSSZ ssz marshals the encodingAccountCodeDiff object
func (e *encodingAccountCodeDiff) MarshalSSZ() ([]byte, error) {
	return ssz.MarshalSSZ(e)
}

// MarshalSSZTo ssz marshals the encodingAccountCodeDiff object to a target array
func (e *encodingAccountCodeDiff) MarshalSSZTo(buf []byte) (dst []byte, err error) {
	dst = buf
	offset := int(24)

	// Field (0) 'Address'
	dst = append(dst, e.Address[:]...)

	// Offset (1) 'Changes'
	dst = ssz.WriteOffset(dst, offset)

	// Field (1) 'Changes'
	if size := len(e.Changes); size > 30000 {
		err = ssz.ErrListTooBigFn("encodingAccountCodeDiff.Changes", size, 30000)
		return
	}
	{
		offset = 4 * len(e.Changes)
		for ii := 0; ii < len(e.Changes); ii++ {
			dst = ssz.WriteOffset(dst, offset)
			offset += e.Changes[ii].SizeSSZ()
		}
	}
	for ii := 0; ii < len(e.Changes); ii++ {
		if dst, err = e.Changes[ii].MarshalSSZTo(dst); err != nil {
			return
		}
	}

	return
}

// UnmarshalSSZ ssz unmarshals the encodingAccountCodeDiff object
func (e *encodingAccountCodeDiff) UnmarshalSSZ(buf []byte) error {
	var err error
	size := uint64(len(buf))
	if size < 24 {
		return ssz.ErrSize
	}

	tail := buf
	var o1 uint64

	// Field (0) 'Address'
	copy(e.Address[:], buf[0:20])

	// Offset (1) 'Changes'
	if o1 = ssz.ReadOffset(buf[20:24]); o1 > size {
		return ssz.ErrOffset
	}

	if o1 != 24 {
		return ssz.ErrInvalidVariableOffset
	}

	// Field (1) 'Changes'
	{
		buf = tail[o1:]
		num, err := ssz.DecodeDynamicLength(buf, 30000)
		if err != nil {
			return err
		}
		e.Changes = make([]encodingCodeChange, num)
		err = ssz.UnmarshalDynamic(buf, num, func(indx int, buf []byte) (err error) {
			if err = e.Changes[indx].UnmarshalSSZ(buf); err != nil {
				return err
			}
			return nil
		})
		if err != nil {
			return err
		}
	}
	return err
}

// SizeSSZ returns the ssz encoded size in bytes for the encodingAccountCodeDiff object
func (e *encodingAccountCodeDiff) SizeSSZ() (size int) {
	size = 24

	// Field (1) 'Changes'
	for ii := 0; ii < len(e.Changes); ii++ {
		size += 4
		size += e.Changes[ii].SizeSSZ()
	}

	return
}

// HashTreeRoot ssz hashes the encodingAccountCodeDiff object
func (e *encodingAccountCodeDiff) HashTreeRoot() ([32]byte, error) {
	return ssz.HashWithDefaultHasher(e)
}

// HashTreeRootWith ssz hashes the encodingAccountCodeDiff object with a hasher
func (e *encodingAccountCodeDiff) HashTreeRootWith(hh ssz.HashWalker) (err error) {
	indx := hh.Index()

	// Field (0) 'Address'
	hh.PutBytes(e.Address[:])

	// Field (1) 'Changes'
	{
		subIndx := hh.Index()
		num := uint64(len(e.Changes))
		if num > 30000 {
			err = ssz.ErrIncorrectListSize
			return
		}
		for _, elem := range e.Changes {
			if err = elem.HashTreeRootWith(hh); err != nil {
				return
			}
		}
		hh.MerkleizeWithMixin(subIndx, num, 30000)
	}

	hh.Merkleize(indx)
	return
}

// GetTree ssz hashes the encodingAccountCodeDiff object
func (e *encodingAccountCodeDiff) GetTree() (*ssz.Node, error) {
	return ssz.ProofTree(e)
}

// MarshalSSZ ssz marshals the encodingAccountNonce object
func (e *encodingAccountNonce) MarshalSSZ() ([]byte, error) {
	return ssz.MarshalSSZ(e)
}

// MarshalSSZTo ssz marshals the encodingAccountNonce object to a target array
func (e *encodingAccountNonce) MarshalSSZTo(buf []byte) (dst []byte, err error) {
	dst = buf

	// Field (0) 'Address'
	dst = append(dst, e.Address[:]...)

	// Field (1) 'NonceBefore'
	dst = ssz.MarshalUint64(dst, e.NonceBefore)

	return
}

// UnmarshalSSZ ssz unmarshals the encodingAccountNonce object
func (e *encodingAccountNonce) UnmarshalSSZ(buf []byte) error {
	var err error
	size := uint64(len(buf))
	if size != 28 {
		return ssz.ErrSize
	}

	// Field (0) 'Address'
	copy(e.Address[:], buf[0:20])

	// Field (1) 'NonceBefore'
	e.NonceBefore = ssz.UnmarshallUint64(buf[20:28])

	return err
}

// SizeSSZ returns the ssz encoded size in bytes for the encodingAccountNonce object
func (e *encodingAccountNonce) SizeSSZ() (size int) {
	size = 28
	return
}

// HashTreeRoot ssz hashes the encodingAccountNonce object
func (e *encodingAccountNonce) HashTreeRoot() ([32]byte, error) {
	return ssz.HashWithDefaultHasher(e)
}

// HashTreeRootWith ssz hashes the encodingAccountNonce object with a hasher
func (e *encodingAccountNonce) HashTreeRootWith(hh ssz.HashWalker) (err error) {
	indx := hh.Index()

	// Field (0) 'Address'
	hh.PutBytes(e.Address[:])

	// Field (1) 'NonceBefore'
	hh.PutUint64(e.NonceBefore)

	hh.Merkleize(indx)
	return
}

// GetTree ssz hashes the encodingAccountNonce object
func (e *encodingAccountNonce) GetTree() (*ssz.Node, error) {
	return ssz.ProofTree(e)
}

// MarshalSSZ ssz marshals the encodingBlockAccessList object
func (e *encodingBlockAccessList) MarshalSSZ() ([]byte, error) {
	return ssz.MarshalSSZ(e)
}

// MarshalSSZTo ssz marshals the encodingBlockAccessList object to a target array
func (e *encodingBlockAccessList) MarshalSSZTo(buf []byte) (dst []byte, err error) {
	dst = buf
	offset := int(16)

	// Offset (0) 'AccountAccesses'
	dst = ssz.WriteOffset(dst, offset)
	for ii := 0; ii < len(e.AccountAccesses); ii++ {
		offset += 4
		offset += e.AccountAccesses[ii].SizeSSZ()
	}

	// Offset (1) 'BalanceDiffs'
	dst = ssz.WriteOffset(dst, offset)
	for ii := 0; ii < len(e.BalanceDiffs); ii++ {
		offset += 4
		offset += e.BalanceDiffs[ii].SizeSSZ()
	}

	// Offset (2) 'CodeDiffs'
	dst = ssz.WriteOffset(dst, offset)
	for ii := 0; ii < len(e.CodeDiffs); ii++ {
		offset += 4
		offset += e.CodeDiffs[ii].SizeSSZ()
	}

	// Offset (3) 'NonceDiffs'
	dst = ssz.WriteOffset(dst, offset)

	// Field (0) 'AccountAccesses'
	if size := len(e.AccountAccesses); size > 100 {
		err = ssz.ErrListTooBigFn("encodingBlockAccessList.AccountAccesses", size, 100)
		return
	}
	{
		offset = 4 * len(e.AccountAccesses)
		for ii := 0; ii < len(e.AccountAccesses); ii++ {
			dst = ssz.WriteOffset(dst, offset)
			offset += e.AccountAccesses[ii].SizeSSZ()
		}
	}
	for ii := 0; ii < len(e.AccountAccesses); ii++ {
		if dst, err = e.AccountAccesses[ii].MarshalSSZTo(dst); err != nil {
			return
		}
	}

	// Field (1) 'BalanceDiffs'
	if size := len(e.BalanceDiffs); size > 100 {
		err = ssz.ErrListTooBigFn("encodingBlockAccessList.BalanceDiffs", size, 100)
		return
	}
	{
		offset = 4 * len(e.BalanceDiffs)
		for ii := 0; ii < len(e.BalanceDiffs); ii++ {
			dst = ssz.WriteOffset(dst, offset)
			offset += e.BalanceDiffs[ii].SizeSSZ()
		}
	}
	for ii := 0; ii < len(e.BalanceDiffs); ii++ {
		if dst, err = e.BalanceDiffs[ii].MarshalSSZTo(dst); err != nil {
			return
		}
	}

	// Field (2) 'CodeDiffs'
	if size := len(e.CodeDiffs); size > 100 {
		err = ssz.ErrListTooBigFn("encodingBlockAccessList.CodeDiffs", size, 100)
		return
	}
	{
		offset = 4 * len(e.CodeDiffs)
		for ii := 0; ii < len(e.CodeDiffs); ii++ {
			dst = ssz.WriteOffset(dst, offset)
			offset += e.CodeDiffs[ii].SizeSSZ()
		}
	}
	for ii := 0; ii < len(e.CodeDiffs); ii++ {
		if dst, err = e.CodeDiffs[ii].MarshalSSZTo(dst); err != nil {
			return
		}
	}

	// Field (3) 'NonceDiffs'
	if size := len(e.NonceDiffs); size > 100 {
		err = ssz.ErrListTooBigFn("encodingBlockAccessList.NonceDiffs", size, 100)
		return
	}
	for ii := 0; ii < len(e.NonceDiffs); ii++ {
		if dst, err = e.NonceDiffs[ii].MarshalSSZTo(dst); err != nil {
			return
		}
	}

	return
}

// UnmarshalSSZ ssz unmarshals the encodingBlockAccessList object
func (e *encodingBlockAccessList) UnmarshalSSZ(buf []byte) error {
	var err error
	size := uint64(len(buf))
	if size < 16 {
		return ssz.ErrSize
	}

	tail := buf
	var o0, o1, o2, o3 uint64

	// Offset (0) 'AccountAccesses'
	if o0 = ssz.ReadOffset(buf[0:4]); o0 > size {
		return ssz.ErrOffset
	}

	if o0 != 16 {
		return ssz.ErrInvalidVariableOffset
	}

	// Offset (1) 'BalanceDiffs'
	if o1 = ssz.ReadOffset(buf[4:8]); o1 > size || o0 > o1 {
		return ssz.ErrOffset
	}

	// Offset (2) 'CodeDiffs'
	if o2 = ssz.ReadOffset(buf[8:12]); o2 > size || o1 > o2 {
		return ssz.ErrOffset
	}

	// Offset (3) 'NonceDiffs'
	if o3 = ssz.ReadOffset(buf[12:16]); o3 > size || o2 > o3 {
		return ssz.ErrOffset
	}

	// Field (0) 'AccountAccesses'
	{
		buf = tail[o0:o1]
		num, err := ssz.DecodeDynamicLength(buf, 100)
		if err != nil {
			return err
		}
		e.AccountAccesses = make([]encodingAccountAccess, num)
		err = ssz.UnmarshalDynamic(buf, num, func(indx int, buf []byte) (err error) {
			if err = e.AccountAccesses[indx].UnmarshalSSZ(buf); err != nil {
				return err
			}
			return nil
		})
		if err != nil {
			return err
		}
	}

	// Field (1) 'BalanceDiffs'
	{
		buf = tail[o1:o2]
		num, err := ssz.DecodeDynamicLength(buf, 100)
		if err != nil {
			return err
		}
		e.BalanceDiffs = make([]encodingAccountBalanceDiff, num)
		err = ssz.UnmarshalDynamic(buf, num, func(indx int, buf []byte) (err error) {
			if err = e.BalanceDiffs[indx].UnmarshalSSZ(buf); err != nil {
				return err
			}
			return nil
		})
		if err != nil {
			return err
		}
	}

	// Field (2) 'CodeDiffs'
	{
		buf = tail[o2:o3]
		num, err := ssz.DecodeDynamicLength(buf, 100)
		if err != nil {
			return err
		}
		e.CodeDiffs = make([]encodingAccountCodeDiff, num)
		err = ssz.UnmarshalDynamic(buf, num, func(indx int, buf []byte) (err error) {
			if err = e.CodeDiffs[indx].UnmarshalSSZ(buf); err != nil {
				return err
			}
			return nil
		})
		if err != nil {
			return err
		}
	}

	// Field (3) 'NonceDiffs'
	{
		buf = tail[o3:]
		num, err := ssz.DivideInt2(len(buf), 28, 100)
		if err != nil {
			return err
		}
		e.NonceDiffs = make([]encodingAccountNonce, num)
		for ii := 0; ii < num; ii++ {
			if err = e.NonceDiffs[ii].UnmarshalSSZ(buf[ii*28 : (ii+1)*28]); err != nil {
				return err
			}
		}
	}
	return err
}

// SizeSSZ returns the ssz encoded size in bytes for the encodingBlockAccessList object
func (e *encodingBlockAccessList) SizeSSZ() (size int) {
	size = 16

	// Field (0) 'AccountAccesses'
	for ii := 0; ii < len(e.AccountAccesses); ii++ {
		size += 4
		size += e.AccountAccesses[ii].SizeSSZ()
	}

	// Field (1) 'BalanceDiffs'
	for ii := 0; ii < len(e.BalanceDiffs); ii++ {
		size += 4
		size += e.BalanceDiffs[ii].SizeSSZ()
	}

	// Field (2) 'CodeDiffs'
	for ii := 0; ii < len(e.CodeDiffs); ii++ {
		size += 4
		size += e.CodeDiffs[ii].SizeSSZ()
	}

	// Field (3) 'NonceDiffs'
	size += len(e.NonceDiffs) * 28

	return
}

// HashTreeRoot ssz hashes the encodingBlockAccessList object
func (e *encodingBlockAccessList) HashTreeRoot() ([32]byte, error) {
	return ssz.HashWithDefaultHasher(e)
}

// HashTreeRootWith ssz hashes the encodingBlockAccessList object with a hasher
func (e *encodingBlockAccessList) HashTreeRootWith(hh ssz.HashWalker) (err error) {
	indx := hh.Index()

	// Field (0) 'AccountAccesses'
	{
		subIndx := hh.Index()
		num := uint64(len(e.AccountAccesses))
		if num > 100 {
			err = ssz.ErrIncorrectListSize
			return
		}
		for _, elem := range e.AccountAccesses {
			if err = elem.HashTreeRootWith(hh); err != nil {
				return
			}
		}
		hh.MerkleizeWithMixin(subIndx, num, 100)
	}

	// Field (1) 'BalanceDiffs'
	{
		subIndx := hh.Index()
		num := uint64(len(e.BalanceDiffs))
		if num > 100 {
			err = ssz.ErrIncorrectListSize
			return
		}
		for _, elem := range e.BalanceDiffs {
			if err = elem.HashTreeRootWith(hh); err != nil {
				return
			}
		}
		hh.MerkleizeWithMixin(subIndx, num, 100)
	}

	// Field (2) 'CodeDiffs'
	{
		subIndx := hh.Index()
		num := uint64(len(e.CodeDiffs))
		if num > 100 {
			err = ssz.ErrIncorrectListSize
			return
		}
		for _, elem := range e.CodeDiffs {
			if err = elem.HashTreeRootWith(hh); err != nil {
				return
			}
		}
		hh.MerkleizeWithMixin(subIndx, num, 100)
	}

	// Field (3) 'NonceDiffs'
	{
		subIndx := hh.Index()
		num := uint64(len(e.NonceDiffs))
		if num > 100 {
			err = ssz.ErrIncorrectListSize
			return
		}
		for _, elem := range e.NonceDiffs {
			if err = elem.HashTreeRootWith(hh); err != nil {
				return
			}
		}
		hh.MerkleizeWithMixin(subIndx, num, 100)
	}

	hh.Merkleize(indx)
	return
}

// GetTree ssz hashes the encodingBlockAccessList object
func (e *encodingBlockAccessList) GetTree() (*ssz.Node, error) {
	return ssz.ProofTree(e)
}
