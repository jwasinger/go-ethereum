// Code generated by fastssz. DO NOT EDIT.
// Hash: 35fc43878dd00cac5378c5fc70c37859106596af95e46d870cec719206a7ee0e
// Version: 0.1.3
package types

import (
	ssz "github.com/ferranbt/fastssz"
)

// MarshalSSZ ssz marshals the PerTxAccess object
func (p *PerTxAccess) MarshalSSZ() ([]byte, error) {
	return ssz.MarshalSSZ(p)
}

// MarshalSSZTo ssz marshals the PerTxAccess object to a target array
func (p *PerTxAccess) MarshalSSZTo(buf []byte) (dst []byte, err error) {
	dst = buf

	// Field (0) 'TxIdx'
	dst = ssz.MarshalUint64(dst, p.TxIdx)

	// Field (1) 'ValueAfter'
	dst = append(dst, p.ValueAfter[:]...)

	return
}

// UnmarshalSSZ ssz unmarshals the PerTxAccess object
func (p *PerTxAccess) UnmarshalSSZ(buf []byte) error {
	var err error
	size := uint64(len(buf))
	if size != 40 {
		return ssz.ErrSize
	}

	// Field (0) 'TxIdx'
	p.TxIdx = ssz.UnmarshallUint64(buf[0:8])

	// Field (1) 'ValueAfter'
	copy(p.ValueAfter[:], buf[8:40])

	return err
}

// SizeSSZ returns the ssz encoded size in bytes for the PerTxAccess object
func (p *PerTxAccess) SizeSSZ() (size int) {
	size = 40
	return
}

// HashTreeRoot ssz hashes the PerTxAccess object
func (p *PerTxAccess) HashTreeRoot() ([32]byte, error) {
	return ssz.HashWithDefaultHasher(p)
}

// HashTreeRootWith ssz hashes the PerTxAccess object with a hasher
func (p *PerTxAccess) HashTreeRootWith(hh ssz.HashWalker) (err error) {
	indx := hh.Index()

	// Field (0) 'TxIdx'
	hh.PutUint64(p.TxIdx)

	// Field (1) 'ValueAfter'
	hh.PutBytes(p.ValueAfter[:])

	hh.Merkleize(indx)
	return
}

// GetTree ssz hashes the PerTxAccess object
func (p *PerTxAccess) GetTree() (*ssz.Node, error) {
	return ssz.ProofTree(p)
}

// MarshalSSZ ssz marshals the SlotAccess object
func (s *SlotAccess) MarshalSSZ() ([]byte, error) {
	return ssz.MarshalSSZ(s)
}

// MarshalSSZTo ssz marshals the SlotAccess object to a target array
func (s *SlotAccess) MarshalSSZTo(buf []byte) (dst []byte, err error) {
	dst = buf
	offset := int(36)

	// Field (0) 'Slot'
	dst = append(dst, s.Slot[:]...)

	// Offset (1) 'Accesses'
	dst = ssz.WriteOffset(dst, offset)

	// Field (1) 'Accesses'
	if size := len(s.Accesses); size > 30000 {
		err = ssz.ErrListTooBigFn("SlotAccess.Accesses", size, 30000)
		return
	}
	for ii := 0; ii < len(s.Accesses); ii++ {
		if dst, err = s.Accesses[ii].MarshalSSZTo(dst); err != nil {
			return
		}
	}

	return
}

// UnmarshalSSZ ssz unmarshals the SlotAccess object
func (s *SlotAccess) UnmarshalSSZ(buf []byte) error {
	var err error
	size := uint64(len(buf))
	if size < 36 {
		return ssz.ErrSize
	}

	tail := buf
	var o1 uint64

	// Field (0) 'Slot'
	copy(s.Slot[:], buf[0:32])

	// Offset (1) 'Accesses'
	if o1 = ssz.ReadOffset(buf[32:36]); o1 > size {
		return ssz.ErrOffset
	}

	if o1 != 36 {
		return ssz.ErrInvalidVariableOffset
	}

	// Field (1) 'Accesses'
	{
		buf = tail[o1:]
		num, err := ssz.DivideInt2(len(buf), 40, 30000)
		if err != nil {
			return err
		}
		s.Accesses = make([]PerTxAccess, num)
		for ii := 0; ii < num; ii++ {
			if err = s.Accesses[ii].UnmarshalSSZ(buf[ii*40 : (ii+1)*40]); err != nil {
				return err
			}
		}
	}
	return err
}

// SizeSSZ returns the ssz encoded size in bytes for the SlotAccess object
func (s *SlotAccess) SizeSSZ() (size int) {
	size = 36

	// Field (1) 'Accesses'
	size += len(s.Accesses) * 40

	return
}

// HashTreeRoot ssz hashes the SlotAccess object
func (s *SlotAccess) HashTreeRoot() ([32]byte, error) {
	return ssz.HashWithDefaultHasher(s)
}

// HashTreeRootWith ssz hashes the SlotAccess object with a hasher
func (s *SlotAccess) HashTreeRootWith(hh ssz.HashWalker) (err error) {
	indx := hh.Index()

	// Field (0) 'Slot'
	hh.PutBytes(s.Slot[:])

	// Field (1) 'Accesses'
	{
		subIndx := hh.Index()
		num := uint64(len(s.Accesses))
		if num > 30000 {
			err = ssz.ErrIncorrectListSize
			return
		}
		for _, elem := range s.Accesses {
			if err = elem.HashTreeRootWith(hh); err != nil {
				return
			}
		}
		hh.MerkleizeWithMixin(subIndx, num, 30000)
	}

	hh.Merkleize(indx)
	return
}

// GetTree ssz hashes the SlotAccess object
func (s *SlotAccess) GetTree() (*ssz.Node, error) {
	return ssz.ProofTree(s)
}

// MarshalSSZ ssz marshals the AccountAccess object
func (a *AccountAccess) MarshalSSZ() ([]byte, error) {
	return ssz.MarshalSSZ(a)
}

// MarshalSSZTo ssz marshals the AccountAccess object to a target array
func (a *AccountAccess) MarshalSSZTo(buf []byte) (dst []byte, err error) {
	dst = buf
	offset := int(36)

	// Field (0) 'Address'
	dst = append(dst, a.Address[:]...)

	// Offset (1) 'Accesses'
	dst = ssz.WriteOffset(dst, offset)

	// Field (1) 'Accesses'
	if size := len(a.Accesses); size > 300000 {
		err = ssz.ErrListTooBigFn("AccountAccess.Accesses", size, 300000)
		return
	}
	{
		offset = 4 * len(a.Accesses)
		for ii := 0; ii < len(a.Accesses); ii++ {
			dst = ssz.WriteOffset(dst, offset)
			offset += a.Accesses[ii].SizeSSZ()
		}
	}
	for ii := 0; ii < len(a.Accesses); ii++ {
		if dst, err = a.Accesses[ii].MarshalSSZTo(dst); err != nil {
			return
		}
	}

	return
}

// UnmarshalSSZ ssz unmarshals the AccountAccess object
func (a *AccountAccess) UnmarshalSSZ(buf []byte) error {
	var err error
	size := uint64(len(buf))
	if size < 36 {
		return ssz.ErrSize
	}

	tail := buf
	var o1 uint64

	// Field (0) 'Address'
	copy(a.Address[:], buf[0:32])

	// Offset (1) 'Accesses'
	if o1 = ssz.ReadOffset(buf[32:36]); o1 > size {
		return ssz.ErrOffset
	}

	if o1 != 36 {
		return ssz.ErrInvalidVariableOffset
	}

	// Field (1) 'Accesses'
	{
		buf = tail[o1:]
		num, err := ssz.DecodeDynamicLength(buf, 300000)
		if err != nil {
			return err
		}
		a.Accesses = make([]SlotAccess, num)
		err = ssz.UnmarshalDynamic(buf, num, func(indx int, buf []byte) (err error) {
			if err = a.Accesses[indx].UnmarshalSSZ(buf); err != nil {
				return err
			}
			return nil
		})
		if err != nil {
			return err
		}
	}
	return err
}

// SizeSSZ returns the ssz encoded size in bytes for the AccountAccess object
func (a *AccountAccess) SizeSSZ() (size int) {
	size = 36

	// Field (1) 'Accesses'
	for ii := 0; ii < len(a.Accesses); ii++ {
		size += 4
		size += a.Accesses[ii].SizeSSZ()
	}

	return
}

// HashTreeRoot ssz hashes the AccountAccess object
func (a *AccountAccess) HashTreeRoot() ([32]byte, error) {
	return ssz.HashWithDefaultHasher(a)
}

// HashTreeRootWith ssz hashes the AccountAccess object with a hasher
func (a *AccountAccess) HashTreeRootWith(hh ssz.HashWalker) (err error) {
	indx := hh.Index()

	// Field (0) 'Address'
	hh.PutBytes(a.Address[:])

	// Field (1) 'Accesses'
	{
		subIndx := hh.Index()
		num := uint64(len(a.Accesses))
		if num > 300000 {
			err = ssz.ErrIncorrectListSize
			return
		}
		for _, elem := range a.Accesses {
			if err = elem.HashTreeRootWith(hh); err != nil {
				return
			}
		}
		hh.MerkleizeWithMixin(subIndx, num, 300000)
	}

	hh.Merkleize(indx)
	return
}

// GetTree ssz hashes the AccountAccess object
func (a *AccountAccess) GetTree() (*ssz.Node, error) {
	return ssz.ProofTree(a)
}

// MarshalSSZ ssz marshals the BalanceChange object
func (b *BalanceChange) MarshalSSZ() ([]byte, error) {
	return ssz.MarshalSSZ(b)
}

// MarshalSSZTo ssz marshals the BalanceChange object to a target array
func (b *BalanceChange) MarshalSSZTo(buf []byte) (dst []byte, err error) {
	dst = buf

	// Field (0) 'TxIdx'
	dst = ssz.MarshalUint64(dst, b.TxIdx)

	// Field (1) 'Delta'
	dst = append(dst, b.Delta[:]...)

	return
}

// UnmarshalSSZ ssz unmarshals the BalanceChange object
func (b *BalanceChange) UnmarshalSSZ(buf []byte) error {
	var err error
	size := uint64(len(buf))
	if size != 20 {
		return ssz.ErrSize
	}

	// Field (0) 'TxIdx'
	b.TxIdx = ssz.UnmarshallUint64(buf[0:8])

	// Field (1) 'Delta'
	copy(b.Delta[:], buf[8:20])

	return err
}

// SizeSSZ returns the ssz encoded size in bytes for the BalanceChange object
func (b *BalanceChange) SizeSSZ() (size int) {
	size = 20
	return
}

// HashTreeRoot ssz hashes the BalanceChange object
func (b *BalanceChange) HashTreeRoot() ([32]byte, error) {
	return ssz.HashWithDefaultHasher(b)
}

// HashTreeRootWith ssz hashes the BalanceChange object with a hasher
func (b *BalanceChange) HashTreeRootWith(hh ssz.HashWalker) (err error) {
	indx := hh.Index()

	// Field (0) 'TxIdx'
	hh.PutUint64(b.TxIdx)

	// Field (1) 'Delta'
	hh.PutBytes(b.Delta[:])

	hh.Merkleize(indx)
	return
}

// GetTree ssz hashes the BalanceChange object
func (b *BalanceChange) GetTree() (*ssz.Node, error) {
	return ssz.ProofTree(b)
}

// MarshalSSZ ssz marshals the AccountBalanceDiff object
func (a *AccountBalanceDiff) MarshalSSZ() ([]byte, error) {
	return ssz.MarshalSSZ(a)
}

// MarshalSSZTo ssz marshals the AccountBalanceDiff object to a target array
func (a *AccountBalanceDiff) MarshalSSZTo(buf []byte) (dst []byte, err error) {
	dst = buf
	offset := int(44)

	// Field (0) 'Address'
	dst = append(dst, a.Address[:]...)

	// Offset (1) 'Changes'
	dst = ssz.WriteOffset(dst, offset)

	// Field (1) 'Changes'
	if size := len(a.Changes); size > 30000 {
		err = ssz.ErrListTooBigFn("AccountBalanceDiff.Changes", size, 30000)
		return
	}
	for ii := 0; ii < len(a.Changes); ii++ {
		if dst, err = a.Changes[ii].MarshalSSZTo(dst); err != nil {
			return
		}
	}

	return
}

// UnmarshalSSZ ssz unmarshals the AccountBalanceDiff object
func (a *AccountBalanceDiff) UnmarshalSSZ(buf []byte) error {
	var err error
	size := uint64(len(buf))
	if size < 44 {
		return ssz.ErrSize
	}

	tail := buf
	var o1 uint64

	// Field (0) 'Address'
	copy(a.Address[:], buf[0:40])

	// Offset (1) 'Changes'
	if o1 = ssz.ReadOffset(buf[40:44]); o1 > size {
		return ssz.ErrOffset
	}

	if o1 != 44 {
		return ssz.ErrInvalidVariableOffset
	}

	// Field (1) 'Changes'
	{
		buf = tail[o1:]
		num, err := ssz.DivideInt2(len(buf), 20, 30000)
		if err != nil {
			return err
		}
		a.Changes = make([]BalanceChange, num)
		for ii := 0; ii < num; ii++ {
			if err = a.Changes[ii].UnmarshalSSZ(buf[ii*20 : (ii+1)*20]); err != nil {
				return err
			}
		}
	}
	return err
}

// SizeSSZ returns the ssz encoded size in bytes for the AccountBalanceDiff object
func (a *AccountBalanceDiff) SizeSSZ() (size int) {
	size = 44

	// Field (1) 'Changes'
	size += len(a.Changes) * 20

	return
}

// HashTreeRoot ssz hashes the AccountBalanceDiff object
func (a *AccountBalanceDiff) HashTreeRoot() ([32]byte, error) {
	return ssz.HashWithDefaultHasher(a)
}

// HashTreeRootWith ssz hashes the AccountBalanceDiff object with a hasher
func (a *AccountBalanceDiff) HashTreeRootWith(hh ssz.HashWalker) (err error) {
	indx := hh.Index()

	// Field (0) 'Address'
	hh.PutBytes(a.Address[:])

	// Field (1) 'Changes'
	{
		subIndx := hh.Index()
		num := uint64(len(a.Changes))
		if num > 30000 {
			err = ssz.ErrIncorrectListSize
			return
		}
		for _, elem := range a.Changes {
			if err = elem.HashTreeRootWith(hh); err != nil {
				return
			}
		}
		hh.MerkleizeWithMixin(subIndx, num, 30000)
	}

	hh.Merkleize(indx)
	return
}

// GetTree ssz hashes the AccountBalanceDiff object
func (a *AccountBalanceDiff) GetTree() (*ssz.Node, error) {
	return ssz.ProofTree(a)
}

// MarshalSSZ ssz marshals the CodeChange object
func (c *CodeChange) MarshalSSZ() ([]byte, error) {
	return ssz.MarshalSSZ(c)
}

// MarshalSSZTo ssz marshals the CodeChange object to a target array
func (c *CodeChange) MarshalSSZTo(buf []byte) (dst []byte, err error) {
	dst = buf
	offset := int(12)

	// Field (0) 'TxIdx'
	dst = ssz.MarshalUint64(dst, c.TxIdx)

	// Offset (1) 'NewCode'
	dst = ssz.WriteOffset(dst, offset)

	// Field (1) 'NewCode'
	if size := len(c.NewCode); size > 24576 {
		err = ssz.ErrBytesLengthFn("CodeChange.NewCode", size, 24576)
		return
	}
	dst = append(dst, c.NewCode...)

	return
}

// UnmarshalSSZ ssz unmarshals the CodeChange object
func (c *CodeChange) UnmarshalSSZ(buf []byte) error {
	var err error
	size := uint64(len(buf))
	if size < 12 {
		return ssz.ErrSize
	}

	tail := buf
	var o1 uint64

	// Field (0) 'TxIdx'
	c.TxIdx = ssz.UnmarshallUint64(buf[0:8])

	// Offset (1) 'NewCode'
	if o1 = ssz.ReadOffset(buf[8:12]); o1 > size {
		return ssz.ErrOffset
	}

	if o1 != 12 {
		return ssz.ErrInvalidVariableOffset
	}

	// Field (1) 'NewCode'
	{
		buf = tail[o1:]
		if len(buf) > 24576 {
			return ssz.ErrBytesLength
		}
		if cap(c.NewCode) == 0 {
			c.NewCode = make([]byte, 0, len(buf))
		}
		c.NewCode = append(c.NewCode, buf...)
	}
	return err
}

// SizeSSZ returns the ssz encoded size in bytes for the CodeChange object
func (c *CodeChange) SizeSSZ() (size int) {
	size = 12

	// Field (1) 'NewCode'
	size += len(c.NewCode)

	return
}

// HashTreeRoot ssz hashes the CodeChange object
func (c *CodeChange) HashTreeRoot() ([32]byte, error) {
	return ssz.HashWithDefaultHasher(c)
}

// HashTreeRootWith ssz hashes the CodeChange object with a hasher
func (c *CodeChange) HashTreeRootWith(hh ssz.HashWalker) (err error) {
	indx := hh.Index()

	// Field (0) 'TxIdx'
	hh.PutUint64(c.TxIdx)

	// Field (1) 'NewCode'
	{
		elemIndx := hh.Index()
		byteLen := uint64(len(c.NewCode))
		if byteLen > 24576 {
			err = ssz.ErrIncorrectListSize
			return
		}
		hh.Append(c.NewCode)
		hh.MerkleizeWithMixin(elemIndx, byteLen, (24576+31)/32)
	}

	hh.Merkleize(indx)
	return
}

// GetTree ssz hashes the CodeChange object
func (c *CodeChange) GetTree() (*ssz.Node, error) {
	return ssz.ProofTree(c)
}

// MarshalSSZ ssz marshals the AccountCodeDiff object
func (a *AccountCodeDiff) MarshalSSZ() ([]byte, error) {
	return ssz.MarshalSSZ(a)
}

// MarshalSSZTo ssz marshals the AccountCodeDiff object to a target array
func (a *AccountCodeDiff) MarshalSSZTo(buf []byte) (dst []byte, err error) {
	dst = buf
	offset := int(44)

	// Field (0) 'Address'
	dst = append(dst, a.Address[:]...)

	// Offset (1) 'Changes'
	dst = ssz.WriteOffset(dst, offset)

	// Field (1) 'Changes'
	if size := len(a.Changes); size > 30000 {
		err = ssz.ErrListTooBigFn("AccountCodeDiff.Changes", size, 30000)
		return
	}
	{
		offset = 4 * len(a.Changes)
		for ii := 0; ii < len(a.Changes); ii++ {
			dst = ssz.WriteOffset(dst, offset)
			offset += a.Changes[ii].SizeSSZ()
		}
	}
	for ii := 0; ii < len(a.Changes); ii++ {
		if dst, err = a.Changes[ii].MarshalSSZTo(dst); err != nil {
			return
		}
	}

	return
}

// UnmarshalSSZ ssz unmarshals the AccountCodeDiff object
func (a *AccountCodeDiff) UnmarshalSSZ(buf []byte) error {
	var err error
	size := uint64(len(buf))
	if size < 44 {
		return ssz.ErrSize
	}

	tail := buf
	var o1 uint64

	// Field (0) 'Address'
	copy(a.Address[:], buf[0:40])

	// Offset (1) 'Changes'
	if o1 = ssz.ReadOffset(buf[40:44]); o1 > size {
		return ssz.ErrOffset
	}

	if o1 != 44 {
		return ssz.ErrInvalidVariableOffset
	}

	// Field (1) 'Changes'
	{
		buf = tail[o1:]
		num, err := ssz.DecodeDynamicLength(buf, 30000)
		if err != nil {
			return err
		}
		a.Changes = make([]CodeChange, num)
		err = ssz.UnmarshalDynamic(buf, num, func(indx int, buf []byte) (err error) {
			if err = a.Changes[indx].UnmarshalSSZ(buf); err != nil {
				return err
			}
			return nil
		})
		if err != nil {
			return err
		}
	}
	return err
}

// SizeSSZ returns the ssz encoded size in bytes for the AccountCodeDiff object
func (a *AccountCodeDiff) SizeSSZ() (size int) {
	size = 44

	// Field (1) 'Changes'
	for ii := 0; ii < len(a.Changes); ii++ {
		size += 4
		size += a.Changes[ii].SizeSSZ()
	}

	return
}

// HashTreeRoot ssz hashes the AccountCodeDiff object
func (a *AccountCodeDiff) HashTreeRoot() ([32]byte, error) {
	return ssz.HashWithDefaultHasher(a)
}

// HashTreeRootWith ssz hashes the AccountCodeDiff object with a hasher
func (a *AccountCodeDiff) HashTreeRootWith(hh ssz.HashWalker) (err error) {
	indx := hh.Index()

	// Field (0) 'Address'
	hh.PutBytes(a.Address[:])

	// Field (1) 'Changes'
	{
		subIndx := hh.Index()
		num := uint64(len(a.Changes))
		if num > 30000 {
			err = ssz.ErrIncorrectListSize
			return
		}
		for _, elem := range a.Changes {
			if err = elem.HashTreeRootWith(hh); err != nil {
				return
			}
		}
		hh.MerkleizeWithMixin(subIndx, num, 30000)
	}

	hh.Merkleize(indx)
	return
}

// GetTree ssz hashes the AccountCodeDiff object
func (a *AccountCodeDiff) GetTree() (*ssz.Node, error) {
	return ssz.ProofTree(a)
}

// MarshalSSZ ssz marshals the AccountNonce object
func (a *AccountNonce) MarshalSSZ() ([]byte, error) {
	return ssz.MarshalSSZ(a)
}

// MarshalSSZTo ssz marshals the AccountNonce object to a target array
func (a *AccountNonce) MarshalSSZTo(buf []byte) (dst []byte, err error) {
	dst = buf

	// Field (0) 'Address'
	dst = append(dst, a.Address[:]...)

	// Field (1) 'NonceAfter'
	dst = ssz.MarshalUint64(dst, a.NonceAfter)

	return
}

// UnmarshalSSZ ssz unmarshals the AccountNonce object
func (a *AccountNonce) UnmarshalSSZ(buf []byte) error {
	var err error
	size := uint64(len(buf))
	if size != 48 {
		return ssz.ErrSize
	}

	// Field (0) 'Address'
	copy(a.Address[:], buf[0:40])

	// Field (1) 'NonceAfter'
	a.NonceAfter = ssz.UnmarshallUint64(buf[40:48])

	return err
}

// SizeSSZ returns the ssz encoded size in bytes for the AccountNonce object
func (a *AccountNonce) SizeSSZ() (size int) {
	size = 48
	return
}

// HashTreeRoot ssz hashes the AccountNonce object
func (a *AccountNonce) HashTreeRoot() ([32]byte, error) {
	return ssz.HashWithDefaultHasher(a)
}

// HashTreeRootWith ssz hashes the AccountNonce object with a hasher
func (a *AccountNonce) HashTreeRootWith(hh ssz.HashWalker) (err error) {
	indx := hh.Index()

	// Field (0) 'Address'
	hh.PutBytes(a.Address[:])

	// Field (1) 'NonceAfter'
	hh.PutUint64(a.NonceAfter)

	hh.Merkleize(indx)
	return
}

// GetTree ssz hashes the AccountNonce object
func (a *AccountNonce) GetTree() (*ssz.Node, error) {
	return ssz.ProofTree(a)
}
