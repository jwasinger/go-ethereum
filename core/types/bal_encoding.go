// Code generated by fastssz. DO NOT EDIT.
// Hash: 3a947dbab0fd5d70d1808d568c4e05508ca2e922aa2ab636efadf34fea106420
// Version: 0.1.3
package types

import (
	ssz "github.com/ferranbt/fastssz"
)

// MarshalSSZ ssz marshals the PerTxAccess object
func (p *PerTxAccess) MarshalSSZ() ([]byte, error) {
	return ssz.MarshalSSZ(p)
}

// MarshalSSZTo ssz marshals the PerTxAccess object to a target array
func (p *PerTxAccess) MarshalSSZTo(buf []byte) (dst []byte, err error) {
	dst = buf

	return
}

// UnmarshalSSZ ssz unmarshals the PerTxAccess object
func (p *PerTxAccess) UnmarshalSSZ(buf []byte) error {
	var err error
	size := uint64(len(buf))
	if size != 0 {
		return ssz.ErrSize
	}

	return err
}

// SizeSSZ returns the ssz encoded size in bytes for the PerTxAccess object
func (p *PerTxAccess) SizeSSZ() (size int) {
	size = 0
	return
}

// HashTreeRoot ssz hashes the PerTxAccess object
func (p *PerTxAccess) HashTreeRoot() ([32]byte, error) {
	return ssz.HashWithDefaultHasher(p)
}

// HashTreeRootWith ssz hashes the PerTxAccess object with a hasher
func (p *PerTxAccess) HashTreeRootWith(hh ssz.HashWalker) (err error) {
	indx := hh.Index()

	hh.Merkleize(indx)
	return
}

// GetTree ssz hashes the PerTxAccess object
func (p *PerTxAccess) GetTree() (*ssz.Node, error) {
	return ssz.ProofTree(p)
}

// MarshalSSZ ssz marshals the SlotAccess object
func (s *SlotAccess) MarshalSSZ() ([]byte, error) {
	return ssz.MarshalSSZ(s)
}

// MarshalSSZTo ssz marshals the SlotAccess object to a target array
func (s *SlotAccess) MarshalSSZTo(buf []byte) (dst []byte, err error) {
	dst = buf

	return
}

// UnmarshalSSZ ssz unmarshals the SlotAccess object
func (s *SlotAccess) UnmarshalSSZ(buf []byte) error {
	var err error
	size := uint64(len(buf))
	if size != 0 {
		return ssz.ErrSize
	}

	return err
}

// SizeSSZ returns the ssz encoded size in bytes for the SlotAccess object
func (s *SlotAccess) SizeSSZ() (size int) {
	size = 0
	return
}

// HashTreeRoot ssz hashes the SlotAccess object
func (s *SlotAccess) HashTreeRoot() ([32]byte, error) {
	return ssz.HashWithDefaultHasher(s)
}

// HashTreeRootWith ssz hashes the SlotAccess object with a hasher
func (s *SlotAccess) HashTreeRootWith(hh ssz.HashWalker) (err error) {
	indx := hh.Index()

	hh.Merkleize(indx)
	return
}

// GetTree ssz hashes the SlotAccess object
func (s *SlotAccess) GetTree() (*ssz.Node, error) {
	return ssz.ProofTree(s)
}

// MarshalSSZ ssz marshals the AccountAccess object
func (a *AccountAccess) MarshalSSZ() ([]byte, error) {
	return ssz.MarshalSSZ(a)
}

// MarshalSSZTo ssz marshals the AccountAccess object to a target array
func (a *AccountAccess) MarshalSSZTo(buf []byte) (dst []byte, err error) {
	dst = buf

	return
}

// UnmarshalSSZ ssz unmarshals the AccountAccess object
func (a *AccountAccess) UnmarshalSSZ(buf []byte) error {
	var err error
	size := uint64(len(buf))
	if size != 0 {
		return ssz.ErrSize
	}

	return err
}

// SizeSSZ returns the ssz encoded size in bytes for the AccountAccess object
func (a *AccountAccess) SizeSSZ() (size int) {
	size = 0
	return
}

// HashTreeRoot ssz hashes the AccountAccess object
func (a *AccountAccess) HashTreeRoot() ([32]byte, error) {
	return ssz.HashWithDefaultHasher(a)
}

// HashTreeRootWith ssz hashes the AccountAccess object with a hasher
func (a *AccountAccess) HashTreeRootWith(hh ssz.HashWalker) (err error) {
	indx := hh.Index()

	hh.Merkleize(indx)
	return
}

// GetTree ssz hashes the AccountAccess object
func (a *AccountAccess) GetTree() (*ssz.Node, error) {
	return ssz.ProofTree(a)
}

// MarshalSSZ ssz marshals the BalanceChange object
func (b *BalanceChange) MarshalSSZ() ([]byte, error) {
	return ssz.MarshalSSZ(b)
}

// MarshalSSZTo ssz marshals the BalanceChange object to a target array
func (b *BalanceChange) MarshalSSZTo(buf []byte) (dst []byte, err error) {
	dst = buf

	return
}

// UnmarshalSSZ ssz unmarshals the BalanceChange object
func (b *BalanceChange) UnmarshalSSZ(buf []byte) error {
	var err error
	size := uint64(len(buf))
	if size != 0 {
		return ssz.ErrSize
	}

	return err
}

// SizeSSZ returns the ssz encoded size in bytes for the BalanceChange object
func (b *BalanceChange) SizeSSZ() (size int) {
	size = 0
	return
}

// HashTreeRoot ssz hashes the BalanceChange object
func (b *BalanceChange) HashTreeRoot() ([32]byte, error) {
	return ssz.HashWithDefaultHasher(b)
}

// HashTreeRootWith ssz hashes the BalanceChange object with a hasher
func (b *BalanceChange) HashTreeRootWith(hh ssz.HashWalker) (err error) {
	indx := hh.Index()

	hh.Merkleize(indx)
	return
}

// GetTree ssz hashes the BalanceChange object
func (b *BalanceChange) GetTree() (*ssz.Node, error) {
	return ssz.ProofTree(b)
}

// MarshalSSZ ssz marshals the AccountBalanceDiff object
func (a *AccountBalanceDiff) MarshalSSZ() ([]byte, error) {
	return ssz.MarshalSSZ(a)
}

// MarshalSSZTo ssz marshals the AccountBalanceDiff object to a target array
func (a *AccountBalanceDiff) MarshalSSZTo(buf []byte) (dst []byte, err error) {
	dst = buf

	return
}

// UnmarshalSSZ ssz unmarshals the AccountBalanceDiff object
func (a *AccountBalanceDiff) UnmarshalSSZ(buf []byte) error {
	var err error
	size := uint64(len(buf))
	if size != 0 {
		return ssz.ErrSize
	}

	return err
}

// SizeSSZ returns the ssz encoded size in bytes for the AccountBalanceDiff object
func (a *AccountBalanceDiff) SizeSSZ() (size int) {
	size = 0
	return
}

// HashTreeRoot ssz hashes the AccountBalanceDiff object
func (a *AccountBalanceDiff) HashTreeRoot() ([32]byte, error) {
	return ssz.HashWithDefaultHasher(a)
}

// HashTreeRootWith ssz hashes the AccountBalanceDiff object with a hasher
func (a *AccountBalanceDiff) HashTreeRootWith(hh ssz.HashWalker) (err error) {
	indx := hh.Index()

	hh.Merkleize(indx)
	return
}

// GetTree ssz hashes the AccountBalanceDiff object
func (a *AccountBalanceDiff) GetTree() (*ssz.Node, error) {
	return ssz.ProofTree(a)
}

// MarshalSSZ ssz marshals the CodeChange object
func (c *CodeChange) MarshalSSZ() ([]byte, error) {
	return ssz.MarshalSSZ(c)
}

// MarshalSSZTo ssz marshals the CodeChange object to a target array
func (c *CodeChange) MarshalSSZTo(buf []byte) (dst []byte, err error) {
	dst = buf

	return
}

// UnmarshalSSZ ssz unmarshals the CodeChange object
func (c *CodeChange) UnmarshalSSZ(buf []byte) error {
	var err error
	size := uint64(len(buf))
	if size != 0 {
		return ssz.ErrSize
	}

	return err
}

// SizeSSZ returns the ssz encoded size in bytes for the CodeChange object
func (c *CodeChange) SizeSSZ() (size int) {
	size = 0
	return
}

// HashTreeRoot ssz hashes the CodeChange object
func (c *CodeChange) HashTreeRoot() ([32]byte, error) {
	return ssz.HashWithDefaultHasher(c)
}

// HashTreeRootWith ssz hashes the CodeChange object with a hasher
func (c *CodeChange) HashTreeRootWith(hh ssz.HashWalker) (err error) {
	indx := hh.Index()

	hh.Merkleize(indx)
	return
}

// GetTree ssz hashes the CodeChange object
func (c *CodeChange) GetTree() (*ssz.Node, error) {
	return ssz.ProofTree(c)
}

// MarshalSSZ ssz marshals the AccountCodeDiff object
func (a *AccountCodeDiff) MarshalSSZ() ([]byte, error) {
	return ssz.MarshalSSZ(a)
}

// MarshalSSZTo ssz marshals the AccountCodeDiff object to a target array
func (a *AccountCodeDiff) MarshalSSZTo(buf []byte) (dst []byte, err error) {
	dst = buf

	return
}

// UnmarshalSSZ ssz unmarshals the AccountCodeDiff object
func (a *AccountCodeDiff) UnmarshalSSZ(buf []byte) error {
	var err error
	size := uint64(len(buf))
	if size != 0 {
		return ssz.ErrSize
	}

	return err
}

// SizeSSZ returns the ssz encoded size in bytes for the AccountCodeDiff object
func (a *AccountCodeDiff) SizeSSZ() (size int) {
	size = 0
	return
}

// HashTreeRoot ssz hashes the AccountCodeDiff object
func (a *AccountCodeDiff) HashTreeRoot() ([32]byte, error) {
	return ssz.HashWithDefaultHasher(a)
}

// HashTreeRootWith ssz hashes the AccountCodeDiff object with a hasher
func (a *AccountCodeDiff) HashTreeRootWith(hh ssz.HashWalker) (err error) {
	indx := hh.Index()

	hh.Merkleize(indx)
	return
}

// GetTree ssz hashes the AccountCodeDiff object
func (a *AccountCodeDiff) GetTree() (*ssz.Node, error) {
	return ssz.ProofTree(a)
}

// MarshalSSZ ssz marshals the AccountNonce object
func (a *AccountNonce) MarshalSSZ() ([]byte, error) {
	return ssz.MarshalSSZ(a)
}

// MarshalSSZTo ssz marshals the AccountNonce object to a target array
func (a *AccountNonce) MarshalSSZTo(buf []byte) (dst []byte, err error) {
	dst = buf

	return
}

// UnmarshalSSZ ssz unmarshals the AccountNonce object
func (a *AccountNonce) UnmarshalSSZ(buf []byte) error {
	var err error
	size := uint64(len(buf))
	if size != 0 {
		return ssz.ErrSize
	}

	return err
}

// SizeSSZ returns the ssz encoded size in bytes for the AccountNonce object
func (a *AccountNonce) SizeSSZ() (size int) {
	size = 0
	return
}

// HashTreeRoot ssz hashes the AccountNonce object
func (a *AccountNonce) HashTreeRoot() ([32]byte, error) {
	return ssz.HashWithDefaultHasher(a)
}

// HashTreeRootWith ssz hashes the AccountNonce object with a hasher
func (a *AccountNonce) HashTreeRootWith(hh ssz.HashWalker) (err error) {
	indx := hh.Index()

	hh.Merkleize(indx)
	return
}

// GetTree ssz hashes the AccountNonce object
func (a *AccountNonce) GetTree() (*ssz.Node, error) {
	return ssz.ProofTree(a)
}
